{
  "name": "yaos",
  "tagline": "Operating System for Internet of Things(IoT) devices",
  "body": "# yaos\r\n\r\nyaos is an embedded operating system for Internet of Things(IoT) devices, specifically for a single-core processor without MMU virtualization. It is designed for energy efficiency and hardware independent development.\r\n\r\nRefer to `/Documentation` directory for more information such as compiling, porting, APIs, etc.\r\n\r\nAny feedback is welcome to *kwon@toanyone.net*. And let me know if any of you are interested in porting to new MCU so that I can give you a hand.\r\n\r\n## Getting Started\r\n\r\n### 1. Download yaos\r\n\r\n`git clone git://github.com/onkwon/yaos`\r\n\r\n### 2. Get a Toolchain\r\n\r\nGet one from [here](https://launchpad.net/gcc-arm-embedded) if you don't have one installed yet. Or you can compile it from source code putting more effort, which is not recommended but still worth trying.\r\n\r\n### 3. Build\r\n\r\n#### STM32\r\n\r\n\tmake clean\r\n\tmake stm32f1 (or stm32f4)\r\n\tmake\r\n\tmake burn\r\n\r\n> Tested on STM32F103 and STM32F407\r\n\r\n#### Raspberry Pi(2)\r\n\r\n\tmake clean\r\n\tmake rpi (or rpi2)\r\n\tmake\r\n\r\nThat's it. Copy `yaos.bin` file into SD card as name of `kernel.img`, where `bootcode.bin` and `start.elf` files exist. Insert SD card in your RPI, turn it on, and enjoy!\r\n\r\n> You can get the GPU firmware and bootloaders [here](https://github.com/raspberrypi/firmware).\r\n\r\nYou will see shell prompt `>` after some system log if uart rs232 cable connected.\r\n\r\nCharacter LCD is also opened by default. You can change default pin assignment in `/mach/rpi/include/pinmap.h`. Pinout:\r\n\r\n\t          -----\r\n\t+3V3 ----|1   2|--\\\r\n\t         |3   4|---- +5V0\r\n\t         |5   6|---- GND\r\n\t DB7 ----|7   8|---- TXD0\r\n\t         |9  10|---- RXD0\r\n\t DB6 ----|11 12|\r\n\t DB5 ----|13 14|\r\n\t DB4 ----|15 16|\r\n\t         |17 18|\r\n\t  E  ----|19 20|\r\n\t  RW ----|21 22|\r\n\t  RS ----|23 24|\r\n\t         |25 26| ---- IR\r\n\t          -----\r\n\r\n> In case of getting error messages something like `undefined reference to __aeabi_uidiv`, specify library path when you `make` in the way below:\r\n\r\n\tLD_LIBRARY_PATH=/usr/local/arm/lib/gcc/arm-none-eabi/4.9.2 make\r\n\r\n> The path is dependent on your development environment.\r\n\r\n## Features\r\n\r\n### Task management and scheduling\r\n\r\nTwo types of task are handled: normal and real time tasks. Simplified fair scheduler for normal tasks while FIFO scheduler for real time tasks. Each task is given a priority which can be dynamically changed with `set_task_pri()`. For real time tasks a higher priority task always preempts lower priority tasks while the same priority tasks take place in turn under round-robin scheduling. Scheduler can be stopped to reduce even the scheduling overhead in case of a time critical task. On the other hand nomal tasks get chance to run by simplified fair scheduler, that picks the minimum value of vruntime up for the next task to run.\r\n\r\nTasks are always in one of five states: running, stopped, waiting, sleeping, or zombie. And a task can be created both statically and dynamically at run-time.\r\n\r\n### System call interface\r\n\r\nSystem resource is accessed by the system call interface entering privileged mode as a user task runs in user(unpriviliged) mode.\r\n\r\n### Virtual file system\r\n\r\nThe concept of virtual file system(VFS) is implemented. The embedded flash rom in SoC can be mounted as the root file system(embedfs) while a ramfs is mounted as a devfs for a device node.\r\n\r\n### Memory management\r\n\r\nPage is unit of memory management but alternative memory manager can be used in such a system of memory shortage.\r\n\r\nBuddy allocator and first-fit allocator are implemented.\r\n\r\n### Deferred interrupt servicing (softirq)\r\n\r\nSoftirqs will preempt any work except the response to a real interrupt as they run at a high priority. In fact softirq is just a kernel task running with interrupts enabled and can sleep but has the highest priority amongst running tasks.\r\n\r\n### Synchronization\r\n\r\nSynchronization primitives such as semaphore, spinlock, etc.\r\n\r\n### Blocking & non-blocking I/O operations\r\n\r\n### Device driver\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}